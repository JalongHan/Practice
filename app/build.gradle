apply plugin: 'com.android.application'

android {
    compileSdkVersion androidVersion.compileSdkVersion
    buildToolsVersion androidVersion.buildToolsVersion

    defaultConfig {
        applicationId androidVersion.applicationId
        minSdkVersion androidVersion.minSdkVersion
        targetSdkVersion androidVersion.targetSdkVersion
        versionCode androidVersion.versionCode
        versionName androidVersion.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName(), isApp: "true"]
                includeCompileClasspath = true
            }
        }
    }

//    buildFeatures {
//        dataBinding = true
//    }
    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            // 是否debug模式,当release下面的debuggable为true时也可以输出日志
            debuggable false
            // 混淆
            minifyEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // zipaligin优化
            zipAlignEnabled true
            // 多dex分包支持
            multiDexEnabled true
            // 配置混淆的文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            aaptOptions {
                cruncherEnabled = false
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        // 排队界面列表生成的json
        exclude 'ANNOTATION.json'
    }

}
dependencies {
    /*
     * implementation:该方式依赖的库不会传递,只会在当前module中生效.
     * api:该方式依赖会传递所依赖的库,当其他module依赖了该module时可以使用该module下使用api依赖的库
     *
     */
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':base')
    api dps.recyclerview

    implementation project(':modules:basics:basics')
    if (!isMvvmDebug) {
        implementation project(':modules:basics:mvvm')
    }

    implementation project(':practice-annotation')
    annotationProcessor project(':practice-compiler')
    annotationProcessor dps.arouter_compiler
    api project(':modules:basics::annotations')
    annotationProcessor project(':modules:basics:processor')
}
