ext {
    // false 作为lib组件 ，true作为application存在
    isBasicsDebug = false // 基础练习组件
    isMvvmDebug = true // mvvm练习组件

    androidVersion = [
            applicationId    : "com.jlhan.practice",
            compileSdkVersion: 29,
            buildToolsVersion: "29.0.3",
            minSdkVersion    : 19,
            targetSdkvErsion : 29,
            versionCode      : 1,
            versionName      : "1.0.0"
    ]

    dps = [
            appcompat       : 'androidx.appcompat:appcompat:1.1.0',
            constraintlayout: 'androidx.constraintlayout:constraintlayout:1.1.3',
            utilcodex       : 'com.blankj:utilcodex:1.28.4',
            eventbus        : 'org.greenrobot:eventbus:3.2.0',
            junit           : 'junit:junit:4.12',
            ext_junit       : 'androidx.test.ext:junit:1.1.1',
            espresso_core   : 'androidx.test.espresso:espresso-core:3.2.0',
            recyclerview    : 'androidx.recyclerview:recyclerview:1.1.0',
            arouter_api     : 'com.alibaba:arouter-api:1.5.0',
            arouter_compiler: 'com.alibaba:arouter-compiler:1.2.2',
            gson            : 'com.google.code.gson:gson:2.8.5'
    ]

    // 设置APP配置
//    setAppDefaultConfig = {
//        extension ->
//            extension.apply plugin: 'com.android.application'
//            extension.description "app"
//            setAndroidConfig extension.android
//            setDependencies extension.dependencies
//    }

    // 设置lib配置
//    setLibDefaultConfig = {
//        extension ->
//            extension.apply plugin: 'com.android.library'
//            extension.description "lib"
//            setAndroidConfig extension.android
//            setDependencies extension.dependencies
//    }

    // 设置Android配置
//    setAndroidConfig = {
//        extension ->
//            extension.compileSdkVersion androidVersion.compileSdkVersion
//            extension.buildToolsVersion androidVersion.buildToolsVersion
//            extension.defaultConfig {
//                targetSdkVersion androidVersion.targetSdkVersion
//                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//                consumerProguardFiles 'consumer-rules.pro'
//                javaCompileOptions {
//                    annotationProcessorOptions {
//                        arguments = [AROUTER_MODULE_NAME: extension.project.getName()]
//                    }
//                }
//            }
//            extension.buildTypes {
//                debug {
//                     debug时使用api21加快构建速度
//                    extension.defaultConfig {
//                        minSdkVersion 21
//                        minifyEnabled false
//                        proguardFiles extension.getDefaultProguardFile('proguard-android-optimize.txt'),
//                                'proguard-rules.pro'
//                    }
//                }
//                release {
//                    extension.defaultConfig {
//                        minSdkVersion androidVersion.minSdkVersion
//                        minifyEnabled false
//                        proguardFiles extension.getDefaultProguardFile('proguard-android-optimize.txt'),
//                                'proguard-rules.pro'
//                    }
//                }
//            }
//            extension.project.tasks.whenTaskAdded { task ->
//                if (task.name.contains("lint") // 不启动lint代码扫描潜在bug可以使用
//                        || task.name.equals("clean")
//                        || task.name.contains("Aidl") // 项目中有用到aidl则不可以舍弃这个任务
//                        || task.name.contains("mockableAndroidJar") // 用不到测试的时候就可以先关闭
//                        || task.name.contains("UnitTest") // 用不到测试的时候就可以先关闭
//                        || task.name.contains("AndroidTest") // 用不到NDK和JNI的也关闭掉
//                        || task.name.contains("Ndk")
//                        || task.name.contains("Jni")
//                ) {
//                    task.enabled = false
//                }
//            }
//    }

    // 设置依赖
//    setDependencies = {
//        extension ->
//            extension.implementation fileTree(dir: 'libs', include: ['*.jar'])
//            extension.annotationProcessor dps.arouter_compiler
//    }

}